security:
    enable_authenticator_manager: true
   
    firewalls:
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern:   ^/api
            stateless: true
            jwt: ~
            #api:
            #    pattern:   ^/api
            #    stateless: true
            #    jwt: ~
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
                # provider that you set earlier inside providers
            provider: app_user_provider
            form_login:
                login_path: login
                check_path: login
                default_target_path: home
            logout:
                path: logout
                target: home
    password_hashers:
        App\Entity\User:
            algorithm: auto


    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
       

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used

    access_control:
    - { path: ^/admin, roles: ROLE_ADMIN }
    - { path: ^/api/login, roles: PUBLIC_ACCESS }
    - { path: ^/api/users, methods: POST, roles: PUBLIC_ACCESS }
    - { path: ^/api/products, roles: PUBLIC_ACCESS }
    - { path: ^/api, roles: PUBLIC_ACCESS }
    - { path: ^/, roles: PUBLIC_ACCESS  }
    - { path: ^/api/users, roles: ROLE_ADMIN }
when@test:
    security:
      